covariance_name = "vcov",
sided = 2))
contrast_tests = data.frame(gene = pvals$name, cell_type = ct,
region_A = region_A, region_B = region_B,
pval = pvals$pval)
#add results to list
all_contrast_tests[[counter]] = contrast_tests
counter = counter + 1
}
}
}
combined_contrast_tests <- dplyr::bind_rows(all_contrast_tests)%>%
dplyr::filter(!is.na(pval))
#get significant switches
combined_contrast_tests$qval = p.adjust(combined_contrast_tests$pval,method = "BH")
significant_isoform_switches = combined_contrast_tests%>%filter(qval < 0.1)
head(significant_isoform_switches,10)
gene <- "Ap3s1"
# Isoform ratio
isoform_vals <- data$isoform_expression[[gene]][[1]]
gene_total <- data$total_gene_expression[, gene]
ratio <- isoform_vals / gene_total
ratio[!is.finite(ratio)] <- NA
# Region labels
region <- apply(data$regions, 1, function(x) {
colnames(data$regions)[which(x == 1)]
})
# Binary group
region_group <- ifelse(region == "regionGranule Cell Layer (GCL+RMS)", "Granule Layer", "Other")
# Combined dataframe
df <- data.frame(
x = data$coords[,1],
y = data$coords[,2],
ratio = ratio,
region = region_group
) %>% filter(!is.na(ratio))
# === Plot 1: Violin + boxplot ===
p1 <- ggplot(df, aes(x = region, y = ratio, fill = region)) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(width = 0.2, outlier.shape = NA) +
theme_minimal() +
labs(
title = paste(gene, "Isoform/Gene Ratio"),
x = "", y = "Ratio"
) +
scale_fill_manual(values = c("Granule Layer" = "tomato", "Other" = "skyblue")) +
theme(legend.position = "none")
# === Plot 2: Spatial plot - Granule Layer only ===
p2 <- df %>%
filter(region == "Granule Layer") %>%
ggplot(aes(x = x, y = y, color = ratio)) +
geom_point(size = 2) +
scale_color_viridis_c(na.value = "grey90") +
coord_fixed() +
theme_minimal() +
labs(title = "Granule Layer", x = NULL, y = NULL, color = "Ratio")
# === Plot 3: Spatial plot - Other regions ===
p3 <- df %>%
filter(region == "Other") %>%
ggplot(aes(x = x, y = y, color = ratio)) +
geom_point(size = 2) +
scale_color_viridis_c(na.value = "grey90") +
coord_fixed() +
theme_minimal() +
labs(title = "Other Regions", x = NULL, y = NULL, color = "Ratio")
p1
View(significant_isoform_switches)
isoform_DE$Ap3s1
#################################
# Remove NAs from p-values
P = combined_contrast_tests$pval
# Cap extreme p-values to avoid -Inf/+Inf in qnorm transformation
P[P > (1 - 1e-10)] = 1 - 1e-10
P[P < (1e-10)] = 1e-10
# Transform p-values to Z-scores
zscores <- qnorm(1 - P)  # Inverse normal transformation
# Adjust p-values using Benjamini-Hochberg (BH) correction
adjusted_pvals = combined_contrast_tests$qval
# Define colors: Red for significant (adj p-value < 0.05), Black otherwise
point_colors = ifelse(adjusted_pvals[!is.na(P)] < 0.1, "red", "black")
# QQ-Plot without title, labels, and ticks
#png("plot_summary_qq.png", height=300, width=300, bg="transparent")
qqnorm(zscores, main="", xlab="", ylab="", axes=FALSE, pch=16, col=point_colors)
# Remove NAs from p-values
P = combined_contrast_tests$pval
# Cap extreme p-values to avoid -Inf/+Inf in qnorm transformation
P[P > (1 - 1e-10)] = 1 - 1e-10
P[P < (1e-10)] = 1e-10
# Transform p-values to Z-scores
zscores <- qnorm(1 - P)  # Inverse normal transformation
# Adjust p-values using Benjamini-Hochberg (BH) correction
adjusted_pvals = combined_contrast_tests$qval
# Define colors: Red for significant (adj p-value < 0.05), Black otherwise
point_colors = ifelse(adjusted_pvals[!is.na(P)] < 0.1, "red", "black")
# QQ-Plot without title, labels, and ticks
#png("plot_summary_qq.png", height=300, width=300, bg="transparent")
qqnorm(zscores, main="", xlab="", ylab="", axes=FALSE, pch=16, col=point_colors)
# Remove NAs from p-values
P = combined_contrast_tests$pval
# Cap extreme p-values to avoid -Inf/+Inf in qnorm transformation
P[P > (1 - 1e-10)] = 1 - 1e-10
P[P < (1e-10)] = 1e-10
# Transform p-values to Z-scores
zscores <- qnorm(1 - P)  # Inverse normal transformation
# Adjust p-values using Benjamini-Hochberg (BH) correction
adjusted_pvals = combined_contrast_tests$qval
# Define colors: Red for significant (adj p-value < 0.05), Black otherwise
point_colors = ifelse(adjusted_pvals[!is.na(P)] < 0.1, "red", "black")
# QQ-Plot without title, labels, and ticks
#png("plot_summary_qq.png", height=300, width=300, bg="transparent")
qqnorm(zscores, main="", xlab="", ylab="", axes=FALSE, pch=16, col=point_colors)
qqline(zscores, col="red", lty=2)  # Add reference line
#get number of genes
ngenes = ncol(data$total_gene_expression)
#initialize intercept estimates
intercept_estimate = vector("list",ngenes)
names(intercept_estimate) = colnames(data$total_gene_expression)
#initialize list of important cell types for this gene
good_cell_type_list = vector("list",ngenes)
names(good_cell_type_list) = colnames(data$total_gene_expression)
#iterate over each gene
for(j in c(1:ngenes)){
intercept_estimate[[j]]=spotglm::run_model(y = data$total_gene_expression[,j],
X = matrix(1,nrow(data$total_gene_expression),1),
lambda = data$deconv,
offset = log(data$library_size),
initialization = T,
family = "spot poisson")
#get T statistics for intercepts
T_statistics = intercept_estimate[[j]]$beta_est
T_statistics = T_statistics/intercept_estimate[[j]]$stand_err_mat
#get "good" cell types: Those that have sufficient expression of the gene
good_ct = which(T_statistics < -1.96 & intercept_estimate[[j]]$beta_est > -11)
#reweight deconvolution vector to reflect difference in expression
deconv_weighted = 0*data$deconv
for(k in c(1:nrow(data$deconv))){
deconv_weighted[k,good_ct]=data$deconv[k,good_ct]*exp(intercept_estimate[[j]]$beta_est[,good_ct])
}
#normalize to sum to one
deconv_weighted = deconv_weighted/rowSums(deconv_weighted)
#remove those cells that have small weights
deconv_weighted[deconv_weighted < 0.2] = 0
#re-normalize
deconv_weighted = deconv_weighted/rowSums(deconv_weighted)
#get cell type frequencies
ct_freq = apply(deconv_weighted,2,function(x){sum(x > 0,na.rm = TRUE)})
#remove cell types that don't appear more than 50 times
important_ct = which(ct_freq > 50)
#get intersection,i.e cell types with sufficient expression and sample size
good_cell_type_list[[j]] = important_ct
}
#get number of genes
ngenes = ncol(data$total_gene_expression)
#initialize intercept estimates
intercept_estimate = vector("list",ngenes)
names(intercept_estimate) = colnames(data$total_gene_expression)
#initialize list of important cell types for this gene
good_cell_type_list = vector("list",ngenes)
names(good_cell_type_list) = colnames(data$total_gene_expression)
#iterate over each gene
for(j in c(1:ngenes)){
intercept_estimate[[j]]=spotglm::run_model(y = data$total_gene_expression[,j],
X = matrix(1,nrow(data$total_gene_expression),1),
lambda = data$deconv,
offset = log(data$library_size),
initialization = T,
family = "spot poisson")
#get T statistics for intercepts
T_statistics = intercept_estimate[[j]]$beta_est
T_statistics = T_statistics/intercept_estimate[[j]]$stand_err_mat
#get "good" cell types: Those that have sufficient expression of the gene
good_ct = which(T_statistics < -1.96 & intercept_estimate[[j]]$beta_est > -11)
#reweight deconvolution vector to reflect difference in expression
deconv_weighted = 0*data$deconv
for(k in c(1:nrow(data$deconv))){
deconv_weighted[k,good_ct]=data$deconv[k,good_ct]*exp(intercept_estimate[[j]]$beta_est[,good_ct])
}
#normalize to sum to one
deconv_weighted = deconv_weighted/rowSums(deconv_weighted)
#remove those cells that have small weights
deconv_weighted[deconv_weighted < 0.2] = 0
#re-normalize
deconv_weighted = deconv_weighted/rowSums(deconv_weighted)
#get cell type frequencies
ct_freq = apply(deconv_weighted,2,function(x){sum(x > 0,na.rm = TRUE)})
#remove cell types that don't appear more than 50 times
important_ct = which(ct_freq > 50)
#get intersection,i.e cell types with sufficient expression and sample size
good_cell_type_list[[j]] = important_ct
}
#Step 2: Fit spot binomial model
isoform_DE = vector("list",ngenes)
names(isoform_DE) = colnames(data$total_gene_expression)
for(j in c(1:ngenes)){
#get gene name
gene = names(isoform_DE)[j]
#get weights
weights = data$total_gene_expression[,gene]
spots = which(weights > 0)
#get covariate weights
ct_covariate_weights  = exp(intercept_estimate[[gene]]$beta_est)
#get good cell types for this gene
good_cell_types = good_cell_type_list[[j]]
if(length(good_cell_types) == 0){
next
}
#run model
isoform_DE[[j]] = spotglm::run_model(y = data$isoform_expression[[gene]][[1]][spots],
X = data$regions[spots,],
lambda = data$deconv[spots,good_cell_types,drop = F],
family = "spot binomial",
weights = weights[spots],
ct_cov_weights = ct_covariate_weights[good_cell_types],
initialization = T)
}
setwd("/Users/kmason/Desktop/Folders/research_projects/spatial/spotglm")
devtools::document()
#Step 2: Fit spot binomial model
isoform_DE = vector("list",ngenes)
names(isoform_DE) = colnames(data$total_gene_expression)
for(j in c(1:ngenes)){
print(j)
#get gene name
gene = names(isoform_DE)[j]
#get weights
weights = data$total_gene_expression[,gene]
#get covariate weights
ct_covariate_weights  = exp(intercept_estimate[[gene]]$beta_est)
#get good cell types for this gene
good_cell_types = good_cell_type_list[[j]]
if(length(good_cell_types) == 0){
next
}
#run model
isoform_DE[[j]] = spotglm::run_model(y = data$isoform_expression[[gene]][[1]],
X = data$regions,
lambda = data$deconv[,good_cell_types,drop = F],
family = "spot binomial",
weights = weights,
ct_cov_weights = ct_covariate_weights[good_cell_types],
initialization = T)
}
setwd("/Users/kmason/Desktop/Folders/research_projects/spatial/spotglm")
devtools::document()
#Step 2: Fit spot binomial model
isoform_DE = vector("list",ngenes)
names(isoform_DE) = colnames(data$total_gene_expression)
for(j in c(1:ngenes)){
print(j)
#get gene name
gene = names(isoform_DE)[j]
#get weights
weights = data$total_gene_expression[,gene]
#get covariate weights
ct_covariate_weights  = exp(intercept_estimate[[gene]]$beta_est)
#get good cell types for this gene
good_cell_types = good_cell_type_list[[j]]
if(length(good_cell_types) == 0){
next
}
#run model
isoform_DE[[j]] = spotglm::run_model(y = data$isoform_expression[[gene]][[1]],
X = data$regions,
lambda = data$deconv[,good_cell_types,drop = F],
family = "spot binomial",
weights = weights,
ct_cov_weights = ct_covariate_weights[good_cell_types],
initialization = T)
}
j
#get gene name
gene = names(isoform_DE)[j]
#get weights
weights = data$total_gene_expression[,gene]
#get covariate weights
exp(intercept_estimate[[gene]]$beta_est)
good_cell_type_list[[j]]
#get gene name
gene = names(isoform_DE)[j]
#get weights
weights = data$total_gene_expression[,gene]
#get covariate weights
ct_covariate_weights  = exp(intercept_estimate[[gene]]$beta_est)
#get good cell types for this gene
good_cell_types = good_cell_type_list[[j]]
if(length(good_cell_types) == 0){
next
}
spotglm::run_model(y = data$isoform_expression[[gene]][[1]],
X = data$regions,
lambda = data$deconv[,good_cell_types,drop = F],
family = "spot binomial",
weights = weights,
ct_cov_weights = ct_covariate_weights[good_cell_types],
initialization = T)
setwd("/Users/kmason/Desktop/Folders/research_projects/spatial/spotglm")
devtools::document()
spotglm::run_model(y = data$isoform_expression[[gene]][[1]],
X = data$regions,
lambda = data$deconv[,good_cell_types,drop = F],
family = "spot binomial",
weights = weights,
ct_cov_weights = ct_covariate_weights[good_cell_types],
initialization = T)
#Step 2: Fit spot binomial model
isoform_DE = vector("list",ngenes)
names(isoform_DE) = colnames(data$total_gene_expression)
for(j in c(1:ngenes)){
print(j)
#get gene name
gene = names(isoform_DE)[j]
#get weights
weights = data$total_gene_expression[,gene]
#get covariate weights
ct_covariate_weights  = exp(intercept_estimate[[gene]]$beta_est)
#get good cell types for this gene
good_cell_types = good_cell_type_list[[j]]
if(length(good_cell_types) == 0){
next
}
#run model
isoform_DE[[j]] = spotglm::run_model(y = data$isoform_expression[[gene]][[1]],
X = data$regions,
lambda = data$deconv[,good_cell_types,drop = F],
family = "spot binomial",
weights = weights,
ct_cov_weights = ct_covariate_weights[good_cell_types],
initialization = T)
}
isoform_DE$Ap3s1$beta_est
isoform_DE$Ap3s1$stand_err_mat
#Store all contrast tests
all_contrast_tests = list()
cell_types = colnames(data$deconv)
regions = colnames(data$regions)
nregion = length(regions)
counter = 1
#test over all cell types and region pairs
for(ct in cell_types){
for(j in c(1:nregion)){
for(k in c(j:nregion)){
if(j==k){
next
}
region_A = regions[j]
region_B = regions[k]
#compute pvalues
pvals = suppressWarnings(spotglm::compute_contrast_significance(input_list = isoform_DE,
cell_type = ct,
effect_names = c(region_A,region_B),
beta_name = "beta_est",
covariance_name = "vcov",
sided = 2))
contrast_tests = data.frame(gene = pvals$name, cell_type = ct,
region_A = region_A, region_B = region_B,
pval = pvals$pval)
#add results to list
all_contrast_tests[[counter]] = contrast_tests
counter = counter + 1
}
}
}
combined_contrast_tests <- dplyr::bind_rows(all_contrast_tests)%>%
dplyr::filter(!is.na(pval))
#get significant switches
combined_contrast_tests$qval = p.adjust(combined_contrast_tests$pval,method = "BH")
significant_isoform_switches = combined_contrast_tests%>%filter(qval < 0.1)
head(significant_isoform_switches,10)
View(significant_isoform_switches)
setwd("/Users/kmason/Desktop/Folders/research_projects/spatial/spotglm")
devtools::document()
#get number of genes
ngenes = ncol(data$total_gene_expression)
#initialize intercept estimates
intercept_estimate = vector("list",ngenes)
names(intercept_estimate) = colnames(data$total_gene_expression)
#initialize list of important cell types for this gene
good_cell_type_list = vector("list",ngenes)
names(good_cell_type_list) = colnames(data$total_gene_expression)
#iterate over each gene
for(j in c(1:ngenes)){
intercept_estimate[[j]]=spotglm::run_model(y = data$total_gene_expression[,j],
X = matrix(1,nrow(data$total_gene_expression),1),
lambda = data$deconv,
offset = log(data$library_size),
initialization = T,
family = "spot poisson")
#get T statistics for intercepts
T_statistics = intercept_estimate[[j]]$beta_est
T_statistics = T_statistics/intercept_estimate[[j]]$stand_err_mat
#get "good" cell types: Those that have sufficient expression of the gene
good_ct = which(T_statistics < -1.96 & intercept_estimate[[j]]$beta_est > -11)
#reweight deconvolution vector to reflect difference in expression
deconv_weighted = 0*data$deconv
for(k in c(1:nrow(data$deconv))){
deconv_weighted[k,good_ct]=data$deconv[k,good_ct]*exp(intercept_estimate[[j]]$beta_est[,good_ct])
}
#normalize to sum to one
deconv_weighted = deconv_weighted/rowSums(deconv_weighted)
#remove those cells that have small weights
deconv_weighted[deconv_weighted < 0.2] = 0
#re-normalize
deconv_weighted = deconv_weighted/rowSums(deconv_weighted)
#get cell type frequencies
ct_freq = apply(deconv_weighted,2,function(x){sum(x > 0,na.rm = TRUE)})
#remove cell types that don't appear more than 50 times
important_ct = which(ct_freq > 50)
#get intersection,i.e cell types with sufficient expression and sample size
good_cell_type_list[[j]] = important_ct
}
#Step 2: Fit spot binomial model
isoform_DE = vector("list",ngenes)
names(isoform_DE) = colnames(data$total_gene_expression)
for(j in c(1:ngenes)){
print(j)
#get gene name
gene = names(isoform_DE)[j]
#get weights
weights = data$total_gene_expression[,gene]
#get covariate weights
ct_covariate_weights  = exp(intercept_estimate[[gene]]$beta_est)
#get good cell types for this gene
good_cell_types = good_cell_type_list[[j]]
if(length(good_cell_types) == 0){
next
}
#run model
isoform_DE[[j]] = spotglm::run_model(y = data$isoform_expression[[gene]][[1]],
X = data$regions,
lambda = data$deconv[,good_cell_types,drop = F],
family = "spot binomial",
weights = weights,
ct_cov_weights = ct_covariate_weights[good_cell_types],
initialization = T)
}
#Step 2: Fit spot binomial model
isoform_DE = vector("list",ngenes)
names(isoform_DE) = colnames(data$total_gene_expression)
for(j in c(1:ngenes)){
print(j)
#get gene name
gene = names(isoform_DE)[j]
#get weights
weights = data$total_gene_expression[,gene]
#get covariate weights
ct_covariate_weights  = exp(intercept_estimate[[gene]]$beta_est)
#get good cell types for this gene
good_cell_types = good_cell_type_list[[j]]
if(length(good_cell_types) == 0){
next
}
#run model
isoform_DE[[j]] = spotglm::run_model(y = data$isoform_expression[[gene]][[1]],
X = data$regions,
lambda = data$deconv[,good_cell_types,drop = F],
family = "spot binomial",
weights = weights,
ct_cov_weights = ct_covariate_weights[good_cell_types],
initialization = T)
}
#Store all contrast tests
all_contrast_tests = list()
cell_types = colnames(data$deconv)
regions = colnames(data$regions)
nregion = length(regions)
counter = 1
#test over all cell types and region pairs
for(ct in cell_types){
for(j in c(1:nregion)){
for(k in c(j:nregion)){
if(j==k){
next
}
region_A = regions[j]
region_B = regions[k]
#compute pvalues
pvals = suppressWarnings(spotglm::compute_contrast_significance(input_list = isoform_DE,
cell_type = ct,
effect_names = c(region_A,region_B),
beta_name = "beta_est",
covariance_name = "vcov",
sided = 2))
contrast_tests = data.frame(gene = pvals$name, cell_type = ct,
region_A = region_A, region_B = region_B,
pval = pvals$pval)
#add results to list
all_contrast_tests[[counter]] = contrast_tests
counter = counter + 1
}
}
}
combined_contrast_tests <- dplyr::bind_rows(all_contrast_tests)%>%
dplyr::filter(!is.na(pval))
#get significant switches
combined_contrast_tests$qval = p.adjust(combined_contrast_tests$pval,method = "BH")
significant_isoform_switches = combined_contrast_tests%>%filter(qval < 0.1)
View(significant_isoform_switches)
# Remove NAs from p-values
P = combined_contrast_tests$pval
# Cap extreme p-values to avoid -Inf/+Inf in qnorm transformation
P[P > (1 - 1e-10)] = 1 - 1e-10
P[P < (1e-10)] = 1e-10
# Transform p-values to Z-scores
zscores <- qnorm(1 - P)  # Inverse normal transformation
# Adjust p-values using Benjamini-Hochberg (BH) correction
adjusted_pvals = combined_contrast_tests$qval
# Define colors: Red for significant (adj p-value < 0.05), Black otherwise
point_colors = ifelse(adjusted_pvals[!is.na(P)] < 0.1, "red", "black")
# QQ-Plot without title, labels, and ticks
#png("plot_summary_qq.png", height=300, width=300, bg="transparent")
qqnorm(zscores, main="", xlab="", ylab="", axes=FALSE, pch=16, col=point_colors)
qqline(zscores, col="red", lty=2)  # Add reference line
