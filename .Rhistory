mean_y_A <- mean(df$y[df$region == "A"])
mean_y_B <- mean(df$y[df$region == "B"])
# Create a data frame for the bar plot
df_bar <- data.frame(Region = c("A", "B"), Mean_Y = c(mean_y_A, mean_y_B))
# Create the bar plot for mean Y values
bar_plot <- ggplot(df_bar, aes(x=Region, y=Mean_Y, fill=Region)) +
geom_bar(stat="identity", color="black") +
scale_fill_manual(values=c("A"="red", "B"="blue")) +
labs(title="", x="", y="") +
ylim(0,1) +
theme_minimal() +
theme(legend.position="none")
# Generate the plots with different shapes based on lambda type
p1 <- overlay_plot("lambda1_norm", "regressed_y1_norm",
"", "", xlim, ylim_regressed, shape_type=3, show_legend=FALSE)  # Plus signs for lambda1
p2 <- overlay_plot("lambda2_norm", "regressed_y2_norm",
"", "", xlim, ylim_regressed, shape_type=16, show_legend=FALSE)  # Circles for lambda2
p3 <- overlay_plot("lambda1", "y",
"", "", xlim, ylim_y, shape_type=3, show_legend=FALSE)  # Plus signs for lambda1
p4 <- overlay_plot("lambda2", "y",
"", "", xlim, ylim_y, shape_type=16, show_legend=FALSE)  # Circles for lambda2 (Legend here)
# Arrange the plots in a 1x5 grid with the bar plot first
grid.arrange(bar_plot, p3, p4, p1, p2, ncol=5)
n = 1e3
n = 2000
library_size = 10
data = simulate_data(n = n, library_size = library_size,prop_A = 0.75,prop_B = 0.25,
iso_A = 0.25,iso_B = 0.25,iso_A_minor = 1,iso_B_minor = 0.5)
beta_0 = matrix(c(0,0,0,0),2,2)
model = spotglm::run_model(y = data$y[,1], X = data$X,
lambda = data$lambda_norm, family = "spot binomial",
weights = rep(library_size,n),beta_0 = beta_0,batch_size = 10)
#get estimate from model
model$beta_est
#get estimated prob.
LaplacesDemon::invlogit(model$beta_est)
model = spotglm::run_model(y = data$y[,1], X = data$X,
lambda = data$lambda_norm, family = "spot binomial",
weights = rep(library_size,n),beta_0 = beta_0,batch_size = 100)
#get estimate from model
model$beta_est
#get estimated prob.
LaplacesDemon::invlogit(model$beta_est)
n = 200
library_size = 200
data = simulate_data(n = n, library_size = library_size,prop_A = 0.75,prop_B = 0.25,
iso_A = 0.25,iso_B = 0.25,iso_A_minor = 1,iso_B_minor = 0.5)
beta_0 = matrix(c(0,0,0,0),2,2)
model = spotglm::run_model(y = data$y[,1], X = data$X,
lambda = data$lambda_norm, family = "spot binomial",
weights = rep(library_size,n),beta_0 = beta_0,batch_size = 10)
#get estimate from model
model$beta_est
#get estimated prob.
LaplacesDemon::invlogit(model$beta_est)
#get expected probabilities across cell types
expected_p = spot_binomial[["predict"]](X = data$X,lambda = data$lambda_norm,beta = model$beta_est)$individual
# Convert data to a dataframe for ggplot
df <- data.frame(lambda1_norm = data$lambda_norm[,1],
lambda2_norm = data$lambda_norm[,2],
lambda1 = data$lambda[,1],
lambda2 = data$lambda[,2],
y = data$y[,1] / library_size,
expected_p1 = expected_p[,1],
expected_p2 = expected_p[,2],
X1 = data$X[,1],
X2 = data$X[,2])
# Compute transformed y values
df$regressed_y1_norm <- df$y - df$lambda2_norm * df$expected_p2   # Adjusted y for Cell Type 1 (normalized)
df$regressed_y2_norm <- df$y - df$lambda1_norm * df$expected_p1   # Adjusted y for Cell Type 2 (normalized)
# Add a column for region labels
df$region <- ifelse(df$X1 == 1, "A", "B")  # A for X1=1, B for X2=1
# Compute global x and y limits
xlim <- c(0,1)
ylim_regressed <- c(-0.01,1)  # Covers both regressed y values
ylim_y <- c(-0.01,1)  # Covers raw y values
# Calculate mean y values for A and B
mean_y_A <- mean(df$y[df$region == "A"])
mean_y_B <- mean(df$y[df$region == "B"])
# Create a data frame for the bar plot
df_bar <- data.frame(Region = c("A", "B"), Mean_Y = c(mean_y_A, mean_y_B))
# Create the bar plot for mean Y values
bar_plot <- ggplot(df_bar, aes(x=Region, y=Mean_Y, fill=Region)) +
geom_bar(stat="identity", color="black") +
scale_fill_manual(values=c("A"="red", "B"="blue")) +
labs(title="", x="Region", y="Isoform 1 proportion") +
ylim(0,1) +
theme(panel.background = element_rect(fill = "white", color = NA),
axis.ticks.minor=element_blank(),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_line(color="gray"),
panel.grid.minor.x=element_blank(),
panel.grid.major.x=element_blank(),
text=element_text(size=6),
axis.title.x=element_text(size=6),
axis.title.y=element_text(size=6)) +
theme(legend.position="none")
# Generate the plots with different shapes based on lambda type
p1 <- overlay_plot("lambda1_norm", "regressed_y1_norm",
"", "", xlim, ylim_regressed,
shape_type=3, show_legend=FALSE)  # Plus signs for lambda1
p1<-p1+xlab("Cell type 1 proportion")+
ylab("Adj. Isoform 1 proportion")+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_line(color="gray"),
panel.grid.minor.x=element_blank(),
panel.grid.major.x=element_line(color="gray"))+
geom_hline(yintercept=0, color="black")+
geom_hline(yintercept=1, color="black")+
geom_vline(xintercept=1, color="black")+
geom_vline(xintercept=0, color="black")
p2 <- overlay_plot("lambda2_norm", "regressed_y2_norm",
"", "", xlim, ylim_regressed,
shape_type=16, show_legend=FALSE)  # Circles for lambda2
p2<-p2+xlab("Cell type 2 proportion")+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_line(color="gray"),
panel.grid.minor.x=element_blank(),
panel.grid.major.x=element_line(color="gray"))+
geom_hline(yintercept=0, color="black")+
geom_hline(yintercept=1, color="black")+
geom_vline(xintercept=1, color="black")+
geom_vline(xintercept=0, color="black")
p3 <- overlay_plot("lambda1", "y",
"", "", xlim, ylim_y, shape_type=3, show_legend=FALSE)  # Plus signs for lambda1
p3<-p3+xlab("Cell type 1 proportion")+
ylab("Isoform 1 proportion")+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_line(color="gray"),
panel.grid.minor.x=element_blank(),
panel.grid.major.x=element_line(color="gray"))+
geom_hline(yintercept=0, color="black")+
geom_hline(yintercept=1, color="black")+
geom_vline(xintercept=1, color="black")+
geom_vline(xintercept=0, color="black")
p4 <- overlay_plot("lambda2", "y",
"", "", xlim, ylim_y, shape_type=16, show_legend=FALSE)  # Circles for lambda2 (Legend here)
p4<- p4+xlab("Cell type 2 proportion")+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_line(color="gray"),
panel.grid.minor.x=element_blank(),
panel.grid.major.x=element_line(color="gray"))+
geom_hline(yintercept=0, color="black")+
geom_hline(yintercept=1, color="black")+
geom_vline(xintercept=1, color="black")+
geom_vline(xintercept=0, color="black")
grid.arrange(bar_plot, p3, p4, p1, p2, ncol=5)
model = spotglm::run_model(y = data$y[,1], X = data$X,
lambda = data$lambda_norm, family = "spot binomial",
weights = rep(library_size,n),beta_0 = beta_0,batch_size = 10,step_size= 0.1)
model = spotglm::run_model(y = data$y[,1], X = data$X,
lambda = data$lambda_norm, family = "spot binomial",
weights = rep(library_size,n),beta_0 = beta_0,batch_size = 10,learning_rate = 0.05)
#get estimate from model
model$beta_est
#get estimated prob.
LaplacesDemon::invlogit(model$beta_est)
model$niter
model = spotglm::run_model(y = data$y[,1], X = data$X,
lambda = data$lambda_norm, family = "spot binomial",
weights = rep(library_size,n),beta_0 = beta_0,batch_size = 10,learning_rate = 0.5)
#get estimate from model
model$beta_est
#get estimated prob.
LaplacesDemon::invlogit(model$beta_est)
model$niter
model = spotglm::run_model(y = data$y[,1], X = data$X,
lambda = data$lambda_norm, family = "spot binomial",
weights = rep(library_size,n),beta_0 = beta_0,batch_size = 32,learning_rate = 0.5)
#get estimate from model
model$beta_est
#get estimated prob.
LaplacesDemon::invlogit(model$beta_est)
n = 200
library_size = 200
data = simulate_data(n = n, library_size = library_size,prop_A = 0.75,prop_B = 0.25,
iso_A = 0.25,iso_B = 0.25,iso_A_minor = 1,iso_B_minor = 0.5)
beta_0 = matrix(c(0,0,0,0),2,2)
model = spotglm::run_model(y = data$y[,1], X = data$X,
lambda = data$lambda_norm, family = "spot binomial",
weights = rep(library_size,n),beta_0 = beta_0,batch_size = 32,learning_rate = 0.5)
#get estimate from model
model$beta_est
#get estimated prob.
LaplacesDemon::invlogit(model$beta_est)
n = 200
library_size = 200
data = simulate_data(n = n, library_size = library_size,prop_A = 0.75,prop_B = 0.25,
iso_A = 0.25,iso_B = 0.25,iso_A_minor = 1,iso_B_minor = 0.5)
beta_0 = matrix(c(0,0,0,0),2,2)
model = spotglm::run_model(y = data$y[,1], X = data$X,
lambda = data$lambda_norm, family = "spot binomial",
weights = rep(library_size,n),beta_0 = beta_0,batch_size = 32,learning_rate = 0.5)
#get estimate from model
model$beta_est
#get estimated prob.
LaplacesDemon::invlogit(model$beta_est)
#get expected probabilities across cell types
expected_p = spot_binomial[["predict"]](X = data$X,lambda = data$lambda_norm,beta = model$beta_est)$individual
# Convert data to a dataframe for ggplot
df <- data.frame(lambda1_norm = data$lambda_norm[,1],
lambda2_norm = data$lambda_norm[,2],
lambda1 = data$lambda[,1],
lambda2 = data$lambda[,2],
y = data$y[,1] / library_size,
expected_p1 = expected_p[,1],
expected_p2 = expected_p[,2],
X1 = data$X[,1],
X2 = data$X[,2])
# Compute transformed y values
df$regressed_y1_norm <- df$y - df$lambda2_norm * df$expected_p2   # Adjusted y for Cell Type 1 (normalized)
df$regressed_y2_norm <- df$y - df$lambda1_norm * df$expected_p1   # Adjusted y for Cell Type 2 (normalized)
# Add a column for region labels
df$region <- ifelse(df$X1 == 1, "A", "B")  # A for X1=1, B for X2=1
# Compute global x and y limits
xlim <- c(0,1)
ylim_regressed <- c(-0.01,1)  # Covers both regressed y values
ylim_y <- c(-0.01,1)  # Covers raw y values
# Calculate mean y values for A and B
mean_y_A <- mean(df$y[df$region == "A"])
mean_y_B <- mean(df$y[df$region == "B"])
# Create a data frame for the bar plot
df_bar <- data.frame(Region = c("A", "B"), Mean_Y = c(mean_y_A, mean_y_B))
# Create the bar plot for mean Y values
bar_plot <- ggplot(df_bar, aes(x=Region, y=Mean_Y, fill=Region)) +
geom_bar(stat="identity", color="black") +
scale_fill_manual(values=c("A"="red", "B"="blue")) +
labs(title="", x="Region", y="Isoform 1 proportion") +
ylim(0,1) +
theme(panel.background = element_rect(fill = "white", color = NA),
axis.ticks.minor=element_blank(),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_line(color="gray"),
panel.grid.minor.x=element_blank(),
panel.grid.major.x=element_blank(),
text=element_text(size=6),
axis.title.x=element_text(size=6),
axis.title.y=element_text(size=6)) +
theme(legend.position="none")
# Generate the plots with different shapes based on lambda type
p1 <- overlay_plot("lambda1_norm", "regressed_y1_norm",
"", "", xlim, ylim_regressed,
shape_type=3, show_legend=FALSE)  # Plus signs for lambda1
p1<-p1+xlab("Cell type 1 proportion")+
ylab("Adj. Isoform 1 proportion")+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_line(color="gray"),
panel.grid.minor.x=element_blank(),
panel.grid.major.x=element_line(color="gray"))+
geom_hline(yintercept=0, color="black")+
geom_hline(yintercept=1, color="black")+
geom_vline(xintercept=1, color="black")+
geom_vline(xintercept=0, color="black")
p2 <- overlay_plot("lambda2_norm", "regressed_y2_norm",
"", "", xlim, ylim_regressed,
shape_type=16, show_legend=FALSE)  # Circles for lambda2
p2<-p2+xlab("Cell type 2 proportion")+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_line(color="gray"),
panel.grid.minor.x=element_blank(),
panel.grid.major.x=element_line(color="gray"))+
geom_hline(yintercept=0, color="black")+
geom_hline(yintercept=1, color="black")+
geom_vline(xintercept=1, color="black")+
geom_vline(xintercept=0, color="black")
p3 <- overlay_plot("lambda1", "y",
"", "", xlim, ylim_y, shape_type=3, show_legend=FALSE)  # Plus signs for lambda1
p3<-p3+xlab("Cell type 1 proportion")+
ylab("Isoform 1 proportion")+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_line(color="gray"),
panel.grid.minor.x=element_blank(),
panel.grid.major.x=element_line(color="gray"))+
geom_hline(yintercept=0, color="black")+
geom_hline(yintercept=1, color="black")+
geom_vline(xintercept=1, color="black")+
geom_vline(xintercept=0, color="black")
p4 <- overlay_plot("lambda2", "y",
"", "", xlim, ylim_y, shape_type=16, show_legend=FALSE)  # Circles for lambda2 (Legend here)
p4<- p4+xlab("Cell type 2 proportion")+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_line(color="gray"),
panel.grid.minor.x=element_blank(),
panel.grid.major.x=element_line(color="gray"))+
geom_hline(yintercept=0, color="black")+
geom_hline(yintercept=1, color="black")+
geom_vline(xintercept=1, color="black")+
geom_vline(xintercept=0, color="black")
grid.arrange(bar_plot, p3, p4, p1, p2, ncol=5)
# Save the plot into editable EMF
#emf("scenario1.emf", width=7.5, height=1.5)
grid.arrange(bar_plot, p3, p4, p1, p2, ncol=5)
#dev.off()
## Get the legends
#pdf("scenario1_legend.pdf", width=5, height=2)
p4 <- overlay_plot("lambda2", "y",
"", "", xlim, ylim_y, shape_type=16, show_legend=TRUE)  # Circles for lambda2 (Legend here)
p3 <- overlay_plot("lambda1", "y",
"", "", xlim, ylim_y, shape_type=3, show_legend=TRUE)  # Plus signs for lambda1
grid.arrange(p3,p4)
#dev.off()
n = 200
library_size = 200
data = simulate_data(n = n, library_size = library_size,prop_A = 0.75,prop_B = 0.25,
iso_A = 0.25,iso_B = 0.25,iso_A_minor = 1,iso_B_minor = 0.5)
beta_0 = matrix(c(0,0,0,0),2,2)
model = spotglm::run_model(y = data$y[,1], X = data$X,
lambda = data$lambda_norm, family = "spot binomial",
weights = rep(library_size,n),beta_0 = beta_0,batch_size = 32,learning_rate = 0.5)
#get estimate from model
model$beta_est
#get estimated prob.
LaplacesDemon::invlogit(model$beta_est)
n = 200
library_size = 200
data = simulate_data(n = n, library_size = library_size,prop_A = 0.75,prop_B = 0.25,
iso_A = 0.25,iso_B = 0.25,iso_A_minor = 1,iso_B_minor = 0.5)
beta_0 = matrix(c(0,0,0,0),2,2)
model = spotglm::run_model(y = data$y[,1], X = data$X,
lambda = data$lambda_norm, family = "spot binomial",
weights = rep(library_size,n),beta_0 = beta_0,batch_size = 32,learning_rate = 0.5)
#get estimate from model
model$beta_est
#get estimated prob.
LaplacesDemon::invlogit(model$beta_est)
n = 200
library_size = 200
data = simulate_data(n = n, library_size = library_size,prop_A = 0.75,prop_B = 0.25,
iso_A = 0.25,iso_B = 0.25,iso_A_minor = 1,iso_B_minor = 0.5)
beta_0 = matrix(c(0,0,0,0),2,2)
model = spotglm::run_model(y = data$y[,1], X = data$X,
lambda = data$lambda_norm, family = "spot binomial",
weights = rep(library_size,n),beta_0 = beta_0,batch_size = 32,learning_rate = 0.5)
#get estimate from model
model$beta_est
#get estimated prob.
LaplacesDemon::invlogit(model$beta_est)
n = 200
library_size = 200
data = simulate_data(n = n, library_size = library_size,prop_A = 0.75,prop_B = 0.25,
iso_A = 0.25,iso_B = 0.25,iso_A_minor = 1,iso_B_minor = 0.5)
beta_0 = matrix(c(0,0,0,0),2,2)
model = spotglm::run_model(y = data$y[,1], X = data$X,
lambda = data$lambda_norm, family = "spot binomial",
weights = rep(library_size,n),beta_0 = beta_0,batch_size = 32,learning_rate = 0.5)
#get estimate from model
model$beta_est
#get estimated prob.
LaplacesDemon::invlogit(model$beta_est)
n = 200
library_size = 200
data = simulate_data(n = n, library_size = library_size,prop_A = 0.75,prop_B = 0.25,
iso_A = 0.25,iso_B = 0.25,iso_A_minor = 1,iso_B_minor = 0.5)
beta_0 = matrix(c(0,0,0,0),2,2)
model = spotglm::run_model(y = data$y[,1], X = data$X,
lambda = data$lambda_norm, family = "spot binomial",
weights = rep(library_size,n),beta_0 = beta_0,batch_size = 32,learning_rate = 0.5)
#get estimate from model
model$beta_est
#get estimated prob.
LaplacesDemon::invlogit(model$beta_est)
n = 200
library_size = 200
data = simulate_data(n = n, library_size = library_size,prop_A = 0.75,prop_B = 0.25,
iso_A = 0.25,iso_B = 0.25,iso_A_minor = 1,iso_B_minor = 0.5)
beta_0 = matrix(c(0,0,0,0),2,2)
model = spotglm::run_model(y = data$y[,1], X = data$X,
lambda = data$lambda_norm, family = "spot binomial",
weights = rep(library_size,n),beta_0 = beta_0,batch_size = 32,learning_rate = 0.5)
#get estimate from model
model$beta_est
#get estimated prob.
LaplacesDemon::invlogit(model$beta_est)
#get expected probabilities across cell types
expected_p = spot_binomial[["predict"]](X = data$X,lambda = data$lambda_norm,beta = model$beta_est)$individual
# Convert data to a dataframe for ggplot
df <- data.frame(lambda1_norm = data$lambda_norm[,1],
lambda2_norm = data$lambda_norm[,2],
lambda1 = data$lambda[,1],
lambda2 = data$lambda[,2],
y = data$y[,1] / library_size,
expected_p1 = expected_p[,1],
expected_p2 = expected_p[,2],
X1 = data$X[,1],
X2 = data$X[,2])
# Compute transformed y values
df$regressed_y1_norm <- df$y - df$lambda2_norm * df$expected_p2   # Adjusted y for Cell Type 1 (normalized)
df$regressed_y2_norm <- df$y - df$lambda1_norm * df$expected_p1   # Adjusted y for Cell Type 2 (normalized)
# Add a column for region labels
df$region <- ifelse(df$X1 == 1, "A", "B")  # A for X1=1, B for X2=1
# Compute global x and y limits
xlim <- c(0,1)
ylim_regressed <- c(-0.01,1)  # Covers both regressed y values
ylim_y <- c(-0.01,1)  # Covers raw y values
# Calculate mean y values for A and B
mean_y_A <- mean(df$y[df$region == "A"])
mean_y_B <- mean(df$y[df$region == "B"])
# Create a data frame for the bar plot
df_bar <- data.frame(Region = c("A", "B"), Mean_Y = c(mean_y_A, mean_y_B))
# Create the bar plot for mean Y values
bar_plot <- ggplot(df_bar, aes(x=Region, y=Mean_Y, fill=Region)) +
geom_bar(stat="identity", color="black") +
scale_fill_manual(values=c("A"="red", "B"="blue")) +
labs(title="", x="Region", y="Isoform 1 proportion") +
ylim(0,1) +
theme(panel.background = element_rect(fill = "white", color = NA),
axis.ticks.minor=element_blank(),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_line(color="gray"),
panel.grid.minor.x=element_blank(),
panel.grid.major.x=element_blank(),
text=element_text(size=6),
axis.title.x=element_text(size=6),
axis.title.y=element_text(size=6)) +
theme(legend.position="none")
# Generate the plots with different shapes based on lambda type
p1 <- overlay_plot("lambda1_norm", "regressed_y1_norm",
"", "", xlim, ylim_regressed,
shape_type=3, show_legend=FALSE)  # Plus signs for lambda1
p1<-p1+xlab("Cell type 1 proportion")+
ylab("Adj. Isoform 1 proportion")+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_line(color="gray"),
panel.grid.minor.x=element_blank(),
panel.grid.major.x=element_line(color="gray"))+
geom_hline(yintercept=0, color="black")+
geom_hline(yintercept=1, color="black")+
geom_vline(xintercept=1, color="black")+
geom_vline(xintercept=0, color="black")
p2 <- overlay_plot("lambda2_norm", "regressed_y2_norm",
"", "", xlim, ylim_regressed,
shape_type=16, show_legend=FALSE)  # Circles for lambda2
p2<-p2+xlab("Cell type 2 proportion")+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_line(color="gray"),
panel.grid.minor.x=element_blank(),
panel.grid.major.x=element_line(color="gray"))+
geom_hline(yintercept=0, color="black")+
geom_hline(yintercept=1, color="black")+
geom_vline(xintercept=1, color="black")+
geom_vline(xintercept=0, color="black")
p3 <- overlay_plot("lambda1", "y",
"", "", xlim, ylim_y, shape_type=3, show_legend=FALSE)  # Plus signs for lambda1
p3<-p3+xlab("Cell type 1 proportion")+
ylab("Isoform 1 proportion")+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_line(color="gray"),
panel.grid.minor.x=element_blank(),
panel.grid.major.x=element_line(color="gray"))+
geom_hline(yintercept=0, color="black")+
geom_hline(yintercept=1, color="black")+
geom_vline(xintercept=1, color="black")+
geom_vline(xintercept=0, color="black")
p4 <- overlay_plot("lambda2", "y",
"", "", xlim, ylim_y, shape_type=16, show_legend=FALSE)  # Circles for lambda2 (Legend here)
p4<- p4+xlab("Cell type 2 proportion")+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_line(color="gray"),
panel.grid.minor.x=element_blank(),
panel.grid.major.x=element_line(color="gray"))+
geom_hline(yintercept=0, color="black")+
geom_hline(yintercept=1, color="black")+
geom_vline(xintercept=1, color="black")+
geom_vline(xintercept=0, color="black")
grid.arrange(bar_plot, p3, p4, p1, p2, ncol=5)
install.packages("pkgdown")
library(pkgdown)
pkgdown::init_site()
install.packages("usethis")
library("usethis")
usethis::use_pkgdown_github_pages()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
.Last.error
pkgdown::build_site()
devtools::install()
devtools::install()
install.packages("promises")
devtools::install()
devtools::install()
devtools::install()
install.packages("pbmcapply")
devtools::install()
devtools::install()
pkgdown::build_site()
