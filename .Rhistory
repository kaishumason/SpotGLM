initialization = T,
family = "spot poisson")
log(data$library_size)
which(names(good_cell_type_list) == "PLP1")
which(names(good_cell_type_list) == "Myl6")
j =441
intercept_estimate[[j]]=spotglm::run_model(y = data$total_gene_expression[,j],
X = matrix(1,nrow(data$total_gene_expression),1),
lambda = data$deconv,
offset = log(data$library_size),
initialization = T,
family = "spot poisson")
#get T statistics for intercepts
T_statistics = intercept_estimate[[j]]$beta_est
T_statistics = T_statistics/intercept_estimate[[j]]$stand_err_mat
#reweight deconvolution vector to reflect difference in expression
deconv_weighted = 0*data$deconv
for(k in c(1:nrow(data$deconv))){
deconv_weighted[k,]=data$deconv[k,]*exp(intercept_estimate[[j]]$beta_est)
}
intercept_estimate[[441]]
spotglm::run_model(y = data$total_gene_expression[,j],
X = matrix(1,nrow(data$total_gene_expression),1),
lambda = data$deconv,
offset = log(data$library_size),
initialization = T,
family = "spot poisson")
sum(data$total_gene_expression[,j])
data$deconv
log(data$library_size)
spotglm::run_model(y = data$total_gene_expression[,j],
X = matrix(1,nrow(data$total_gene_expression),1),
lambda = data$deconv,
offset = log(data$library_size),
initialization = T,
family = "spot poisson",min_freq = 0)
setwd("/Users/kmason/Desktop/Folders/research_projects/spatial/spotglm")
devtools::document()
setwd("/Users/kmason/Desktop/Folders/research_projects/spatial/spotglm")
devtools::document()
#get number of genes
ngenes = ncol(data$total_gene_expression)
#initialize intercept estimates
intercept_estimate = vector("list",ngenes)
names(intercept_estimate) = colnames(data$total_gene_expression)
#initialize list of important cell types for this gene
good_cell_type_list = vector("list",ngenes)
names(good_cell_type_list) = colnames(data$total_gene_expression)
#iterate over each gene
for(j in c(1:ngenes)){
intercept_estimate[[j]]=spotglm::run_model(y = data$total_gene_expression[,j],
X = matrix(1,nrow(data$total_gene_expression),1),
lambda = data$deconv,
offset = log(data$library_size),
initialization = T,
family = "spot poisson",min_freq = 0)
#get T statistics for intercepts
T_statistics = intercept_estimate[[j]]$beta_est
T_statistics = T_statistics/intercept_estimate[[j]]$stand_err_mat
#reweight deconvolution vector to reflect difference in expression
deconv_weighted = 0*data$deconv
for(k in c(1:nrow(data$deconv))){
deconv_weighted[k,]=data$deconv[k,]*exp(intercept_estimate[[j]]$beta_est)
}
#normalize to sum to one
deconv_weighted = deconv_weighted/rowSums(deconv_weighted)
#remove those cells that have small weights
deconv_weighted[deconv_weighted < 0.2] = 0
#re-normalize
deconv_weighted = deconv_weighted/rowSums(deconv_weighted)
#get cell type frequencies
ct_freq = apply(deconv_weighted,2,function(x){sum(x > 0,na.rm = TRUE)})
#remove cell types that don't appear more than 50 times
important_ct = which(ct_freq > 50)
#get "good" cell types: Those that have sufficient expression of the gene
good_ct = which(T_statistics < -1.96 & intercept_estimate[[j]]$beta_est > -11)
#get intersection,i.e cell types with sufficient expression and sample size
good_cell_type_list[[j]] = intersect(good_ct, important_ct)
}
intercept_estimate[[441]]
good_cell_type_list[[441]]
colnames(deconv_weighted)[c(3,8,9)]
#Step 2: Fit spot binomial model
isoform_DE = vector("list",ngenes)
names(isoform_DE) = colnames(data$total_gene_expression)
for(j in c(1:ngenes)){
#get gene name
gene = names(isoform_DE)[j]
#get weights
weights = data$total_gene_expression[,gene]
#get covariate weights
ct_covariate_weights  = exp(intercept_estimate[[gene]]$beta_est)
#get good cell types for this gene
good_cell_types = good_cell_type_list[[j]]
if(length(good_cell_types) == 0){
next
}
#run model
isoform_DE[[j]] = spotglm::run_model(y = data$isoform_expression[[gene]][[1]],
X = data$regions,
lambda = data$deconv[,good_cell_types,drop = F],
family = "spot binomial",
weights = weights,
ct_cov_weights = ct_covariate_weights[good_cell_types],
initialization = T,
min_freq = 10)
}
spotglm::run_model(y = data$isoform_expression[[gene]][[1]],
X = data$regions,
lambda = data$deconv[,good_cell_types,drop = F],
family = "spot binomial",
weights = weights,
ct_cov_weights = ct_covariate_weights[good_cell_types],
initialization = T,
min_freq = 10)
j
setwd("/Users/kmason/Desktop/Folders/research_projects/spatial/spotglm")
devtools::document()
spotglm::run_model(y = data$isoform_expression[[gene]][[1]],
X = data$regions,
lambda = data$deconv[,good_cell_types,drop = F],
family = "spot binomial",
weights = weights,
ct_cov_weights = ct_covariate_weights[good_cell_types],
initialization = T,
min_freq = 10)
setwd("/Users/kmason/Desktop/Folders/research_projects/spatial/spotglm")
devtools::document()
spotglm::run_model(y = data$isoform_expression[[gene]][[1]],
X = data$regions,
lambda = data$deconv[,good_cell_types,drop = F],
family = "spot binomial",
weights = weights,
ct_cov_weights = ct_covariate_weights[good_cell_types],
initialization = T,
min_freq = 10)
gene
j = 441
#get gene name
gene = names(isoform_DE)[j]
#get weights
weights = data$total_gene_expression[,gene]
#get covariate weights
ct_covariate_weights  = exp(intercept_estimate[[gene]]$beta_est)
#get good cell types for this gene
good_cell_types = good_cell_type_list[[j]]
if(length(good_cell_types) == 0){
next
}
#run model
isoform_DE[[j]] = spotglm::run_model(y = data$isoform_expression[[gene]][[1]],
X = data$regions,
lambda = data$deconv[,good_cell_types,drop = F],
family = "spot binomial",
weights = weights,
ct_cov_weights = ct_covariate_weights[good_cell_types],
initialization = T,
min_freq = 10)
spotglm::run_model(y = data$isoform_expression[[gene]][[1]],
X = data$regions,
lambda = data$deconv[,good_cell_types,drop = F],
family = "spot binomial",
weights = weights,
ct_cov_weights = ct_covariate_weights[good_cell_types],
initialization = T,
min_freq = 10)
#Step 2: Fit spot binomial model
isoform_DE = vector("list",ngenes)
names(isoform_DE) = colnames(data$total_gene_expression)
for(j in c(1:ngenes)){
print(j)
#get gene name
gene = names(isoform_DE)[j]
#get weights
weights = data$total_gene_expression[,gene]
#get covariate weights
ct_covariate_weights  = exp(intercept_estimate[[gene]]$beta_est)
#get good cell types for this gene
good_cell_types = good_cell_type_list[[j]]
if(length(good_cell_types) == 0){
next
}
#run model
isoform_DE[[j]] = spotglm::run_model(y = data$isoform_expression[[gene]][[1]],
X = data$regions,
lambda = data$deconv[,good_cell_types,drop = F],
family = "spot binomial",
weights = weights,
ct_cov_weights = ct_covariate_weights[good_cell_types],
initialization = T,
min_freq = 10)
}
warnings()
setwd("/Users/kmason/Desktop/Folders/research_projects/spatial/spotglm")
devtools::document()
#Step 2: Fit spot binomial model
isoform_DE = vector("list",ngenes)
names(isoform_DE) = colnames(data$total_gene_expression)
for(j in c(1:ngenes)){
print(j)
#get gene name
gene = names(isoform_DE)[j]
#get weights
weights = data$total_gene_expression[,gene]
#get covariate weights
ct_covariate_weights  = exp(intercept_estimate[[gene]]$beta_est)
#get good cell types for this gene
good_cell_types = good_cell_type_list[[j]]
if(length(good_cell_types) == 0){
next
}
#run model
isoform_DE[[j]] = spotglm::run_model(y = data$isoform_expression[[gene]][[1]],
X = data$regions,
lambda = data$deconv[,good_cell_types,drop = F],
family = "spot binomial",
weights = weights,
ct_cov_weights = ct_covariate_weights[good_cell_types],
initialization = T,
min_freq = 10)
}
warnings()
setwd("/Users/kmason/Desktop/Folders/research_projects/spatial/spotglm")
devtools::document()
#Step 2: Fit spot binomial model
isoform_DE = vector("list",ngenes)
names(isoform_DE) = colnames(data$total_gene_expression)
for(j in c(1:ngenes)){
print(j)
#get gene name
gene = names(isoform_DE)[j]
#get weights
weights = data$total_gene_expression[,gene]
#get covariate weights
ct_covariate_weights  = exp(intercept_estimate[[gene]]$beta_est)
#get good cell types for this gene
good_cell_types = good_cell_type_list[[j]]
if(length(good_cell_types) == 0){
next
}
#run model
isoform_DE[[j]] = spotglm::run_model(y = data$isoform_expression[[gene]][[1]],
X = data$regions,
lambda = data$deconv[,good_cell_types,drop = F],
family = "spot binomial",
weights = weights,
ct_cov_weights = ct_covariate_weights[good_cell_types],
initialization = T,
min_freq = 10)
}
setwd("/Users/kmason/Desktop/Folders/research_projects/spatial/spotglm")
devtools::document()
#Step 2: Fit spot binomial model
isoform_DE = vector("list",ngenes)
names(isoform_DE) = colnames(data$total_gene_expression)
for(j in c(1:ngenes)){
print(j)
#get gene name
gene = names(isoform_DE)[j]
#get weights
weights = data$total_gene_expression[,gene]
#get covariate weights
ct_covariate_weights  = exp(intercept_estimate[[gene]]$beta_est)
#get good cell types for this gene
good_cell_types = good_cell_type_list[[j]]
if(length(good_cell_types) == 0){
next
}
#run model
isoform_DE[[j]] = spotglm::run_model(y = data$isoform_expression[[gene]][[1]],
X = data$regions,
lambda = data$deconv[,good_cell_types,drop = F],
family = "spot binomial",
weights = weights,
ct_cov_weights = ct_covariate_weights[good_cell_types],
initialization = T,
min_freq = 10)
}
#Store all contrast tests
all_contrast_tests = list()
cell_types = colnames(data$deconv)
regions = colnames(data$regions)
nregion = length(regions)
counter = 1
#test over all cell types and region pairs
for(ct in cell_types){
for(j in c(1:nregion)){
for(k in c(j:nregion)){
if(j==k){
next
}
region_A = regions[j]
region_B = regions[k]
#compute pvalues
pvals = suppressWarnings(spotglm::compute_contrast_significance(input_list = isoform_DE,
cell_type = ct,
effect_names = c(region_A,region_B),
beta_name = "beta_est",
covariance_name = "vcov",
sided = 2))
contrast_tests = data.frame(gene = pvals$name, cell_type = ct,
region_A = region_A, region_B = region_B,
pval = pvals$pval)
#add results to list
all_contrast_tests[[counter]] = contrast_tests
counter = counter + 1
}
}
}
combined_contrast_tests <- dplyr::bind_rows(all_contrast_tests)%>%
dplyr::filter(!is.na(pval))
#get significant switches
combined_contrast_tests$qval = p.adjust(combined_contrast_tests$pval,method = "BH")
significant_isoform_switches = combined_contrast_tests%>%filter(qval < 0.1)
head(significant_isoform_switches,10)
View(significant_isoform_switches)
isoform_DE$Myl6$beta_est
isoform_DE$Myl6$stand_err_mat
View(significant_isoform_switches)
isoform_DE$Fam118b$beta_est
isoform_DE$Fam118b$stand_err_mat
isoform_DE$Ap3s1$beta_est
isoform_DE$Ap3s1$stand_err_mat
View(significant_isoform_switches)
data = sparrow::simulate_data(n = 1e5, nct = 8,effect_range = c(-0.2,0.2),min_effect = 0.05,
intercept_range = c(-6,-4),
library_size = 1000, spot_ct = 2,
p = 8,num_null = 2,prob_ct = NULL)
colnames(data$X) = paste0("effect_",c(1:ncol(data$X))-1)
colnames(data$X)[1] = "intercept"
colnames(data$lambda) = paste0("cell_type_",c(1:ncol(data$lambda)))
model = spotglm::run_model(y = data$y,X = data$X,lambda = data$lambda,
family = "spot poisson",offset=rep(log(1000),
length(data$y)),n_epochs = 100,batch_size= 500,
learning_rate = 1,max_diff = 1-1e-6,
initialization = T)
model = spotglm::run_model(y = data$y,X = data$X,lambda = data$lambda,
family = "spot poisson",offset=rep(log(1000),
length(data$y)),n_epochs = 100,batch_size= 500,
learning_rate = 1,max_diff = 1-1e-6,
initialization = T)
plot(data$beta[-1,],model$beta_est[-1,])
plot(data$beta[-1,],model$beta_est[-1,])
plot(data$beta[-1,],model$beta_est[-1,])
abline(a=0,b=1,col = "red")
data = sparrow::simulate_data(n = 1e5, nct = 8,family = "binomial", effect_range = c(-0.2,0.2),min_effect = 0.05,
intercept_range = c(-6,-4),
library_size = 10, spot_ct = 2,
p = 8,num_null = 2,prob_ct = NULL)
colnames(data$X) = paste0("effect_",c(1:ncol(data$X))-1)
colnames(data$X)[1] = "intercept"
colnames(data$lambda) = paste0("cell_type_",c(1:ncol(data$lambda)))
ata = sparrow::simulate_data(n = 1e5, nct = 8,family = "binomial", effect_range = c(-4,4),min_effect = 0.5,
intercept_range = c(-6,6),
library_size = 10, spot_ct = 2,
p = 8,num_null = 2,prob_ct = NULL)
colnames(data$X) = paste0("effect_",c(1:ncol(data$X))-1)
colnames(data$X)[1] = "intercept"
colnames(data$lambda) = paste0("cell_type_",c(1:ncol(data$lambda)))
data = sparrow::simulate_data(n = 1e5, nct = 8,family = "binomial", effect_range = c(-4,4),min_effect = 0.5,
intercept_range = c(-6,6),
library_size = 10, spot_ct = 2,
p = 8,num_null = 2,prob_ct = NULL)
colnames(data$X) = paste0("effect_",c(1:ncol(data$X))-1)
colnames(data$X)[1] = "intercept"
colnames(data$lambda) = paste0("cell_type_",c(1:ncol(data$lambda)))
data$y
model = spotglm::run_model(y = data$y,X = data$X,lambda = data$lambda,
family = "spot binomial",weights=rep((10),
length(data$y)),n_epochs = 100,batch_size= 500,
learning_rate = 1,max_diff = 1-1e-6,
initialization = T)
model$beta_est
data$beta
plot(data$beta[-1,],model$beta_est[-1,])
abline(a=0,b=1,col = "red")
data = sparrow::simulate_data(n = 1e5, nct = 8,family = "poisson",
effect_range = c(-0.2,0.2),
min_effect = 0.05,
intercept_range = c(-6,-4),
library_size = 1000, spot_ct = 2,
p = 8,num_null = 2,prob_ct = NULL)
colnames(data$X) = paste0("effect_",c(1:ncol(data$X))-1)
colnames(data$X)[1] = "intercept"
colnames(data$lambda) = paste0("cell_type_",c(1:ncol(data$lambda)))
```
data = spotglm::read_spatial_atac()
#number of regions
region = apply(data$regions,1,function(x){which(x == 1)})
n_regions <- length(unique(region))
# Create a data frame for plotting
plot_df <- data.frame(
x = data$coords[, 1],
y = data$coords[, 2],
region = factor(region)  # convert to factor for discrete coloring
)
ggplot(plot_df, aes(x = x, y = y, color = region)) +
geom_point(size = 2) +
scale_color_manual(values = hue_pal()(n_regions)) +
labs(title = "Spots Colored by Region", color = "Region") +
theme_minimal()
library(spotglm)
library(sparrow)
library(ggplot2)
library(scales)
library(dplyr)
library(ggplot2)
library(patchwork)
#number of regions
region = apply(data$regions,1,function(x){which(x == 1)})
n_regions <- length(unique(region))
# Create a data frame for plotting
plot_df <- data.frame(
x = data$coords[, 1],
y = data$coords[, 2],
region = factor(region)  # convert to factor for discrete coloring
)
ggplot(plot_df, aes(x = x, y = y, color = region)) +
geom_point(size = 2) +
scale_color_manual(values = hue_pal()(n_regions)) +
labs(title = "Spots Colored by Region", color = "Region") +
theme_minimal()
num_motifs = ncol(data$motif_scores)
res = vector("list",num_motifs)
t1 = Sys.time()
for(j in c(1:num_motifs)){
if(j%%100 == 0){
print(Sys.time() - t1)
}
res[[j]] = spot_lm(y = data$motif_scores[,j],X = data$regions,
lambda = data$deconv)
}
names(res) = colnames(data$motif_scores)
sig_genes = compute_contrast_significance(input_list = res,
cell_type = "Oligodendrocytes",
effect_names = c("regionC3","regionC0"),
beta_name = "beta",covariance_name = "vcov",
sided = 1,direction = "pos")
sig_genes = sig_genes%>%filter(!is.na(pval))
m = paste0("Motifs exhibiting differential accessibility in Oligodendrocytes",
" in corpus callosum vs cortex")
print(m)
print(rownames(sig_genes)[sig_genes$qval < 0.05])
library(spotglm)
library(ggplot2)
library(patchwork)
library(dplyr)
# Prepare data for plotting
plot_df_deconv <- data.frame(
x = data$coords[, 1],
y = data$coords[, 2],
subclone_1 = data$deconv[, "subclone_1"]
)
data = spotglm::read_visium()
# Prepare data for plotting
plot_df_deconv <- data.frame(
x = data$coords[, 1],
y = data$coords[, 2],
subclone_1 = data$deconv[, "subclone_1"]
)
plot_df_niche <- data.frame(
x = data$coords[, 1],
y = data$coords[, 2],
subclone_1 = data$niche[, "subclone_1"]
)
# Plot 1: deconv
p1 <- ggplot(plot_df_deconv, aes(x = x, y = y, color = subclone_1)) +
geom_point(size = 2) +
scale_color_viridis_c() +
labs(title = "Deconvolution - Subclone 1", color = "Subclone 1") +
theme_minimal()
# Plot 2: niche
p2 <- ggplot(plot_df_niche, aes(x = x, y = y, color = subclone_1)) +
geom_point(size = 2) +
scale_color_viridis_c() +
labs(title = "Niche Covariate - Subclone 1", color = "Subclone 1") +
theme_minimal()
p1 + p2
num_genes = ncol(data$counts)
res = vector("list",num_genes)
t1 = Sys.time()
#run spotGLM for each gene
for(j in c(1:num_genes)){
if(j%%500 == 0){
print(j)
print(Sys.time() - t1)
}
res[[j]] = spotglm::run_model(y = data$counts[,j],X = data$niche, lambda = data$deconv,
family = "spot poisson",offset = log(data$library_size),
initialization = T,batch_size = 500)
}
names(res) = colnames(data$counts)
#compute contrast test
sig_genes = compute_contrast_significance(input_list = res,
cell_type = "stromal",
effect_names = c("subclone_1","subclone_2"),
beta_name = "beta_est",covariance_name = "vcov",
sided = 1,direction = "pos")
sig_genes = sig_genes%>%filter(!is.na(pval))
m = paste0("The following genes are niche marker genes for fibroblasts near",
" tumor sublcone 1 vs tumor subclone 2")
print(m)
print(rownames(sig_genes)[sig_genes$qval < 0.05])
#get significant genes
sig_genes = compute_significance(input_list = res,cell_type = "stromal",
effect_name = "subclone_1",
beta_name = "beta_est",
standard_error_name = "stand_err_mat",
sided = 1,direction = "pos")
sig_genes = sig_genes%>%filter(!is.na(pval))
print("The following genes are (fibroblast,tumor subclone 1) niche differential")
print(rownames(sig_genes)[sig_genes$qval < 0.05])
